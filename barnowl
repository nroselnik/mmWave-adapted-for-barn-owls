#include <Arduino.h>
#include <U8x8lib.h>
#include "Seeed_Arduino_mmWave.h"
#include <Adafruit_NeoPixel.h>

// Setup mmWave serial
#ifdef ESP32
  #include <HardwareSerial.h>
  HardwareSerial mmWaveSerial(0);
#else
  #define mmWaveSerial Serial1
#endif

// OLED display setup (software I2C)
U8X8_SSD1306_128X64_NONAME_SW_I2C u8x8(
    /* clock=*/D0, /* data=*/D10,
    /* reset=*/U8X8_PIN_NONE);  // OLEDs without reset

// RGB LED setup
Adafruit_NeoPixel pixels = Adafruit_NeoPixel(1, D1, NEO_GRB + NEO_KHZ800);

// Label enums for screen refresh logic
typedef enum { LABEL_BREATH, LABEL_HEART, LABEL_DISTANCE } Label;

// Efficient display update function
void updateDisplay(Label label, float value) {
  static float last_breath_rate = -1.0;
  static float last_heart_rate  = -1.0;
  static float last_distance    = -1.0;

  switch (label) {
    case LABEL_BREATH:
      if (value == last_breath_rate) break;
      u8x8.setCursor(11, 3);
      u8x8.print(value);
      last_breath_rate = value;
      break;

    case LABEL_HEART:
      if (value == last_heart_rate) break;
      u8x8.setCursor(11, 5);
      u8x8.print(value);
      last_heart_rate = value;
      break;

    case LABEL_DISTANCE:
      if (value == last_distance) break;
      u8x8.setCursor(11, 7);
      u8x8.print(value);
      last_distance = value;
      break;

    default:
      break;
  }
}

// Global objects
SEEED_MR60BHA2 mmWave;

// Text labels
static const char* TAG_Breath   = "BreathRate";
static const char* TAG_Heart    = "HeartRate";
static const char* TAG_Distance = "Distance";

// ---------- SETUP ----------
void setup() {
  Serial.begin(115200);
  mmWave.begin(&mmWaveSerial);
  Serial.println("Welcome, my heart is beatin'");

  // RGB LED (green by default)
  pixels.begin();
  pixels.setPixelColor(0, pixels.Color(0, 125, 0));
  pixels.setBrightness(8);
  pixels.show();

  // OLED screen
  u8x8.begin();
  u8x8.setFlipMode(3);  // Adjust display orientation if needed
  u8x8.clearDisplay();
  u8x8.setFont(u8x8_font_victoriamedium8_r);

  u8x8.setCursor(1, 0);
  u8x8.print("Rate & Distance");

  u8x8.setCursor(0, 3); u8x8.print(TAG_Breath);
  u8x8.setCursor(0, 5); u8x8.print(TAG_Heart);
  u8x8.setCursor(0, 7); u8x8.print(TAG_Distance);

  u8x8.setFont(u8x8_font_chroma48medium8_n);
}

// ---------- LOOP ----------
void loop() {
  if (mmWave.update(100)) {
    float breath_rate = 0;
    float heart_rate  = 0;
    float distance    = 0;

    // Get breathing rate
    if (mmWave.getBreathRate(breath_rate)) {
      updateDisplay(LABEL_BREATH, breath_rate);
    }

    // Get heart rate
    if (mmWave.getHeartRate(heart_rate)) {
      // Apply correction factor for Barn Owl (Tyto javanica javanica)
      // NOTE: Adjust this +45.35 value if using with other species
      float corrected_hr = heart_rate + 45.35;

      updateDisplay(LABEL_HEART, corrected_hr);

      // LED color logic
      if (corrected_hr < 120) {
        pixels.setPixelColor(0, pixels.Color(125, 0, 0)); // Red = low
      } else {
        pixels.setPixelColor(0, pixels.Color(0, 125, 0)); // Green = good
      }
      pixels.show();

      // Serial log
      Serial.printf("Raw HR       : %.2f bpm\n", heart_rate);
      Serial.printf("Corrected HR : %.2f bpm\n", corrected_hr);
    }

    // Get distance
    if (mmWave.getDistance(distance)) {
      updateDisplay(LABEL_DISTANCE, distance);
      if (distance > 70) {
        Serial.println("No owl detected in range.");
      }
    }
  }
}
